package bas.leanback.effect;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.widget.RelativeLayout;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.zhang.phoenix.R;

/**
 * Generated by bas-leanback-layout-compiler. Do not edit it!
 */
public class EffectRelativeLayout extends RelativeLayout implements EffectLayoutDelegate.Callback {
  private final EffectLayoutDelegate effectDelegate;

  public EffectRelativeLayout(@NonNull Context context) {
    this(context,(AttributeSet) null);
  }

  public EffectRelativeLayout(@NonNull Context context, @Nullable AttributeSet attrs) {
    this(context, attrs, R.attr.effectLayoutStyle) ;
  }

  public EffectRelativeLayout(@NonNull Context context, @Nullable AttributeSet attrs,
      int defStyleAttr) {
    super(context, attrs, defStyleAttr);
    effectDelegate = EffectLayoutDelegate.create(this, this, attrs, defStyleAttr);
  }

  public EffectRelativeLayout(@NonNull Context context, @NonNull EffectParams effectParams) {
    super(context);
    effectDelegate = EffectLayoutDelegate.create(this, this, effectParams);
  }

  @Override
  public void callSuperDispatchDraw(@Nullable Canvas canvas) {
    super.dispatchDraw(canvas);
  }

  @Override
  public void callSuperDraw(@Nullable Canvas canvas) {
    super.draw(canvas);
  }

  @Override
  public void callSuperOnDetachedFromWindow() {
    super.onDetachedFromWindow();
  }

  @Override
  public boolean callSuperDispatchTouchEvent(@NonNull MotionEvent event) {
    return super.dispatchTouchEvent(event);
  }

  @Override
  protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
    effectDelegate.onSizeChanged(w, h, oldw, oldh);
  }

  @Override
  protected void dispatchDraw(@Nullable Canvas canvas) {
    assert canvas != null;
    effectDelegate.dispatchDraw(canvas);
  }

  @SuppressLint(value = "MissingSuperCall")
  @Override
  public void draw(@Nullable Canvas canvas) {
    assert canvas != null;
    effectDelegate.draw(canvas);
  }

  @Override
  protected void onFocusChanged(boolean gainFocus, int direction,
      @Nullable Rect previouslyFocusedRect) {
    super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
    effectDelegate.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
  }

  /**
   * 执行焦点效果 */
  public void performFocusChanged(boolean hasFocus) {
    effectDelegate.performFocusChanged(hasFocus);
  }

  @Override
  public void onViewAdded(@Nullable View child) {
    super.onViewAdded(child);
    effectDelegate.onViewAdded(child);
  }

  @SuppressLint(value = "MissingSuperCall")
  @Override
  protected void onDetachedFromWindow() {
    effectDelegate.onDetachedFromWindow();
  }

  @Override
  public boolean dispatchTouchEvent(@NonNull MotionEvent event) {
    return effectDelegate.dispatchTouchEvent(event);
  }
}
